#!/bin/bash
shopt -s extglob

# We'll use our run_with_maven.sh helper script to handle dependencies, build
# the classpath, and, finally, execute the main class. Use of this helper
# script requires that we set the following shell variables:
#
#   * DEPENDENCIES - an array of Maven dependencies in
#     groupId:artifactId:version (GAV) notation. The run_with_maven.sh script
#     will utilize maven functionality to ensure that these dependencies, as
#     well as any transtive dependencies, are present in the local maven cache,
#     ~/.m2/repository, downloading them from Maven Central if necessary.
#
#   * MAIN_CLASS - the class to be executed. It must have a `public static void
#     (String[] args)` method.
#
# Optionally, the following shell variables may also be set:
#
#   * JAVA_OPTS - an array of any JVM options you want set
#
#   * JAVA_HOME - location of the JRE to use. The default behavior is to use whichever
#     java is on the PATH.
#
#   * MAIN_CLASS_ARGS - Arguments to provide to the main class. These are in
#     addition to the arguments provided to the calling script.
#
# In summary, the main class gets called like this:
#
#    "$JAVACMD" "${JAVA_OPTS[@]}" \
#      -classpath "$(IFS=:; echo "${classpath_overall[*]}")" \
#      "${MAIN_CLASS}" "${MAIN_CLASS_ARGS[@]}" "$@"
#
# NOTE: The classpath calculation is expensive. It gets cached at
# `${XDG_CACHE_HOME:-$HOME/.cache}/<scriptname>.classpath`. If you add
# dependencies, or change their versions, it is necessary to remove that cache
# file to force the helper script to recalculate the classpath.  As a
# convenience, specifying the --clear-classpath option will remove this cache
# file for you.
#
DEPENDENCIES=(
  com.facebook:nailgun-server:1.0.1
  com.facebook:nailgun-examples:1.0.1
  net.java.dev.jna:jna:5.12.1
  net.java.dev.jna:jna-platform:5.12.1
  org.ccil.cowan.tagsoup:tagsoup:1.2.1
  net.sf.saxon:Saxon-HE:11.4
  jline:jline:2.14.6
  org.xmlresolver:xmlresolver:4.5.2
  com.github.jnr:jnr-posix:3.1.16
  org.robin-a-meade:nails:0.1.0
)

# Add the -server option to select the HotSpot JVM.
# This probably doesn't make a difference because discussion here says
# the HotSpot JVM is used by default on 64-bit systems for several years.
# https://stackoverflow.com/questions/198577/real-differences-between-java-server-and-java-client
JAVA_OPTS=(-server)

readonly MAIN_CLASS=com.facebook.nailgun.NGServer

if pgrep -f 'java\b.*\bcom.facebook.nailgun.NGServer\b'; then
  echo "The NailGun server is already running" >&2
  exit 1
fi

: ${NAILGUN_SERVER:=local:/tmp/ngs}
if [[ $NAILGUN_SERVER = local:* ]]; then
  path_to_socket_file=${NAILGUN_SERVER#local:}
  if [[ -e $path_to_socket_file ]]; then
    echo "The socket file, $path_to_socket_file, already exists." >&2
    echo "Removing the socket file, $path_to_socket_file" >&2
    if rm "$path_to_socket_file"; then
      echo "Removed the socket file, $path_to_socket_file" >&2
    else
      echo "Couldn't removed the socket file, $path_to_socket_file" >&2
      exit 1
    fi
  fi
fi

umask 077
set -- "$NAILGUN_SERVER"

export NAILGUN_SERVER

# We run this initialization block in a separate child process
# We sleep for 1 second to give the server time to start
{
  count_attempts=0
  for (( count_attempts = 1 ; count_attempts <= 30 ; count_attempts++ )); do
    sleep 1
    echo "Initiating attempt $count_attempts to connect to the server..."
    if ng ng-version; then
      echo "Successly connected to the server after $count_attempts attempts"
      break
    else
      echo "Failed to connect to the server on attempt $count_attempts"
    fi
  done
  if [[ count_attempts = 31 ]]; then
    echo "error: timeout: NailGun server didn't start after 30 seconds"
    exit
  fi

  symlink () {
    if [[ ! -e ~/.local/bin/$1 ]]; then
      ln -s /usr/local/bin/ng ~/.local/bin/"$1"
    fi
  }

  # Official examples from the NailGun project
  ng ng-alias ng-binary-echo com.facebook.nailgun.examples.BinaryEcho
  ng ng-alias ng-dump-all com.facebook.nailgun.examples.DumpAll
  ng ng-alias ng-echo com.facebook.nailgun.examples.Echo
  ng ng-alias ng-exit com.facebook.nailgun.examples.Exit
  ng ng-alias ng-hash com.facebook.nailgun.examples.Hash
  ng ng-alias ng-heartbeat com.facebook.nailgun.examples.Heartbeat
  ng ng-alias ng-hello-world com.facebook.nailgun.examples.HelloWorld
  ng ng-alias ng-prompt com.facebook.nailgun.examples.Prompt
  ng ng-alias push com.facebook.nailgun.examples.Stack
  ng ng-alias pop com.facebook.nailgun.examples.Stack
  ng ng-alias ng-thread-test com.facebook.nailgun.examples.ThreadTest

  # A couple of toy Nails for testing behavior
  ng ng-alias ng-diag org.robin_a_meade.nails.NailDiag
  ng ng-alias ng-prepend org.robin_a_meade.nails.Prepend

  # Tagsoup
  #ng ng-alias ng-tagsoup org.ccil.cowan.tagsoup.CommandLine
  ng ng-alias ng-tagsoup org.robin_a_meade.nails.Tagsoup

  # Saxon XSLT
  #ng ng-alias ng-saxon-transform net.sf.saxon.Transform
  ng ng-alias ng-saxon-transform org.robin_a_meade.nails.SaxonTransform

  # Saxon XQuery
  #ng ng-alias ng-saxon-transform net.sf.saxon.Query
  ng ng-alias ng-saxon-query org.robin_a_meade.nails.SaxonQuery

  # For each ng-alias, we make a symbolic link (if not already existing)
  # Built-in aliases
  symlink ng-alias
  symlink ng-cp
  symlink ng-stats
  symlink ng-stop
  symlink ng-version
  # Official examples from the NailGun project
  symlink ng-binary-echo
  symlink ng-dump-all
  symlink ng-echo
  symlink ng-exit
  symlink ng-hash
  symlink ng-heartbeat
  symlink ng-hello-world
  symlink ng-prompt
  symlink ng-push
  symlink ng-pop
  symlink ng-thread-test
  # Mine
  symlink ng-diag
  symlink ng-prepend
  symlink ng-tagsoup
  symlink ng-saxon-transform
  symlink ng-saxon-query

  # List all defined aliases
  ng ng-alias
} &

echo "About to source run_with_maven.sh"
source run_with_maven.sh
